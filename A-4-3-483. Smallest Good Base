class Solution {
    public String smallestGoodBase(String n) {
       long  num = Long.parseLong(n);
	for (int maxTerm = 60; maxTerm >= 1; maxTerm--) {
		long lowBase = 2;
		long highBase = num - 1;

		while (lowBase <= highBase) {
			long midBase = lowBase + (highBase - lowBase) / 2;
			long value = 0, x = 1;
			boolean isCurrentValueGreaterthanTargetNum = false;

			for (int currentTerm = 0; currentTerm < maxTerm; currentTerm++) {
				value = value + x;

				// If the next term will cause an overflow or exceed the target number, stop
				if ((num - value) / x < midBase && currentTerm < maxTerm - 1) {
					isCurrentValueGreaterthanTargetNum = true;
					break;
				}

				x = x * midBase; // Move to the next power of the base
			}

			if (isCurrentValueGreaterthanTargetNum) {
				highBase = midBase - 1; // Search in the lower half
			} else if (value < num) {
				lowBase = midBase + 1; // Search in the upper half
			} else {
				return midBase+""; // Found the correct base
			}
		}
	}
	return 0+""; // If no base is found, return 0 (though this should not happen)
    }

}

