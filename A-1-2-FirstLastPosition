//https://www.geeksforgeeks.org/find-first-and-last-positions-of-an-element-in-a-sorted-array/#practice

//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

class pair  {  
    long first, second;  
    public pair(long first, long second)  
    {  
        this.first = first;  
        this.second = second;  
    }  
}

class Main {
	public static void main(String[] args) throws IOException
	{
	        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int t =
            Integer.parseInt(br.readLine().trim()); // Inputting the testcases
        while(t-->0)
        {
            long n = Long.parseLong(br.readLine().trim());
            long a[] = new long[(int)(n)];
            // long getAnswer[] = new long[(int)(n)];
            String inputLine[] = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++) {
                a[i] = Long.parseLong(inputLine[i]);
            }
            long k = Long.parseLong(br.readLine().trim());
            
            Solution obj = new Solution();
            pair ans = obj.indexes(a, k);
            if (ans.first == -1 && ans.second == -1)
                System.out.println(-1);
            else
                System.out.println(ans.first+" "+ans.second);
            
        }
	}
}


// } Driver Code Ends


//User function Template for Java

/*
class pair  {  
    long first, second;  
    public pair(long first, long second)  
    {  
        this.first = first;  
        this.second = second;  
    }  
}
*/

class Solution {
    
    public pair indexes(long arr[], long x)
    {
          //  int currentTarget = Integer.parseInt(bufferedReader.readLine());
			int firstOccurance = getFirstOccurance(x,arr);
			int lastOccurance = getLastOccurance(x,arr);
			pair p = new pair(firstOccurance,lastOccurance);
			return p;

    }
    private static int getLastOccurance(long target, long[] arr) {
		
		
		int l = 0 ;
		int r = arr.length-1;
				while (l<=r) {
					int mid = l + (r-l)/2;
					if(arr[mid]==target)
					{
						if(mid==arr.length-1)
							return mid;
						else if(arr[mid+1]!=target)
							return mid;
						else
						{
							l = mid+1;
						}
					}
					else if(arr[mid] < target)
					{
						l = mid+1;
					}
					else
					{
						r = mid-1;
					}
				}//while
		return -1;
	}

	private static int getFirstOccurance(long target, long[] arr) {
		int l = 0 ;
		int r = arr.length-1;
				while (l<=r) {
					int mid = l + (r-l)/2;
					if(arr[mid]==target)
					{
						if(mid==0)
							return mid;
						else if(arr[mid-1]!=target)
							return mid;
						else
						{
							r = mid-1;
						}
					}
					else if(arr[mid] < target)
					{
						l = mid+1;
					}
					else
					{
						r = mid-1;
					}
				}//while
		return -1;
	}

}
