/*Given a sorted array of n elements containing elements in range from 
1 to n−1 i.e. one element occurs twice, the task is to find the repeating element in an array.

Follow up: Your solution should run in 
O(logn) time

Input Format

The first line of input contains 
N, number of elements in arrayThe second line of input contains N space-separated integers, 
nums[1], nums[2], ......... nums[N]
Constraints

2 ≤ N≤10^5
1 ≤ nums[i] ≤N−1
Output Format

Print the repeating element
Sample Input 0

7
1 2 3 4 4 5 6

Sample Output 0

4

Example
Input
7
1 2 3 4 4 5 6
Output
4
*/
/* package codechef; // don't place package name! */
import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
public class Main
{
    public static void main (String[] args) throws java.lang.Exception
    {
  		InputStreamReader inputStreamReader = new InputStreamReader(System.in);
		BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
		int arrSize = Integer.parseInt(bufferedReader.readLine().trim());
		int arr[] = new int[arrSize];
		int k = 0;
		for(String str : bufferedReader.readLine().trim().split(" "))
		{
			arr[k++] = Integer.parseInt(str);
		}
		int n = getonlyRepeatingElemet(arr);
		System.out.println(n);
		bufferedReader.close();
		inputStreamReader.close();
	}

	private static int getonlyRepeatingElemet(int[] arr) {
		int low = 0;
		int hi = arr.length-1;
		while(low<=hi)
		{
			int mid = low + (hi-low)/2;
			if(arr[mid]==mid)//current value arr[mid] is  on rt side of answer
			{
				hi = mid-1;
			}
			else
			{
				if(arr[mid]==arr[mid+1])//got the repeating element
				{
					return arr[mid];
				}
				// else if(arr[mid]+1==mid)//current value arr[mid] is present on the left side of ans
				// {
					low=mid+1;
				// }
			}
		}
		return -1;
	}

}
