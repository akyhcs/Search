https://leetcode.com/problems/find-in-mountain-array/submissions/1165481942/

/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */
 
public class Solution {
	public int findInMountainArray(int target, MountainArray mountainArr) {
		int n = mountainArr.length();

		// Step 1: Find the peak element
		int peak = findPeakIndex(mountainArr, n);

		// Step 2: Try to find the target in the increasing part
		int leftSearch = binarySearch(mountainArr, target, 0, peak, true);
		if (leftSearch != -1) {
			return leftSearch;
		}

		// Step 3: Try to find the target in the decreasing part
		return binarySearch(mountainArr, target, peak + 1, n - 1, false);
	}

	private int findPeakIndex(MountainArray mountainArr, int n) {
		int left = 0, right = n - 1,pivot = -1;
		while (left < right) {
			int mid = left + (right - left) / 2;
			if (mountainArr.get(mid) < mountainArr.get(mid + 1)) {
                left = mid + 1;
                
			} else {
				right = mid;
			}
		}
		return left;//left==right
	}

	private int binarySearch(MountainArray mountainArr, int target, int left, int right, boolean isAscending) {
		while (left <= right) {
			int mid = left + (right - left) / 2;
			int midValue = mountainArr.get(mid);
			if (midValue == target) {
				return mid;
			}
			if (isAscending) {
				if (midValue < target) {
					left = mid + 1;
				} else {
					right = mid - 1;
				}
			} else {
				if (midValue > target) {
					left = mid + 1;
				} else {
					right = mid - 1;
				}
			}
		}
		return -1;
	}
}
