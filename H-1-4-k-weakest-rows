//https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/submissions/
import java.util.*;
class Solution {
    public int[] kWeakestRows(int[][] mat, int k) {
   int arr[] = new int[k];
	SortedMap<Integer, ArrayList<Integer>> sortedMap = new TreeMap<Integer, ArrayList<Integer>>();
	
	for(int i =0 ;i<mat.length;i++)
	{
		int lastOccurance = getLastOccurance(mat,i);
		int frequency = lastOccurance-0+1;
		if(sortedMap.containsKey(frequency))
		{
			sortedMap.get(frequency).add(i);
		}
		else
		{
			ArrayList<Integer> list = new ArrayList<Integer>();
			list.add(i);
			sortedMap.put(frequency,list);
		}
	}///
	int i = 0;
	for(Integer integer : sortedMap.keySet()) {
		if(i>=k)
		{
			break;
		}
		if(sortedMap.get(integer).size()==1)
		{
			arr[i++] = sortedMap.get(integer).get(0);
		}
		else
		{
			List<Integer> list = sortedMap.get(integer);
			Collections.sort(list);
			int j = 0;
			while(i<k && j<list.size())
			{
				arr[i++] = list.get(j++);
			}
		}
	}

		
    return arr;
	}

    private static int getLastOccurance(int[][] mat, int i) {
		int l = 0 ;
		int r = mat[i].length-1;
		while(l<=r)
		{
			int mid = l + (r-l)/2;
			if(mat[i][mid]==1)
			{
				if(mid==mat[i].length-1)
				{
					return mid;
				}
				else if(mat[i][mid+1]!=1)
				{
					return mid;
				}
				else
				{
					l = mid+1;
				}
			}
			else if(mat[i][mid]==0)
			{
				r = mid-1;
			}
			else if(mat[i][mid]==1)
			{
				l = mid+1;
			}
		}
		return -1;
	}

}
