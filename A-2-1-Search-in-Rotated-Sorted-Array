//https://leetcode.com/problems/search-in-rotated-sorted-array/description/
class Solution {
    public int search(int[] nums, int target) {
        int pivotIndex = getPivotIndex(nums);
		//if nums size ==1
		
		if(target==nums[pivotIndex])
		{
			return pivotIndex;
		}
		//if(target>=nums[0] && target<= nums[pivotIndex-1])
			int k =  binarySearch(nums,0,pivotIndex-1,target);
			if(k!=-1)
				return k;
      //if(target>=nums[pivotIndex+1] && target<= nums[arr.lenght-1])
			 k = binarySearch(nums,pivotIndex+1,nums.length-1,target);
			return k;
		//return -1;
    }
    private static int binarySearch(int[] arr,int low,int hi,int target)
	{
		while(low<=hi)
		{
			int mid = low + (hi-low)/2;
			if(arr[mid]==target)
				return mid;
			else if(target>arr[mid])
			{
				low=mid+1;
			}
			else
			{
				hi=mid-1;
			}
		}
		return -1;
	}
    private static int getPivotIndex(int[] arr) {
		int low = 0;
		int high = arr.length-1;
		//if only one element is ther
		if(low==high)
			return low;
		while(low<=high)
		{
			
			int mid = low+(high-low)/2;
			
			if(arr[mid]< arr[arr.length-1])
			{
				high=mid-1;
			}
			else
			{
				if(arr[mid]>arr[mid+1])
				{
					return mid;
				}
				else if(arr[mid]> arr[arr.length-1])
				{
					low=mid+1;
				}
			}
		}
		return arr.length-1;
	}


}
