class Solution {
    public String smallestGoodBase(String n) {
        //String n = "1000000000000000000";
		long num = Long.parseLong(n);
		SmallestGoodBase smallestGoodBase = new SmallestGoodBase();
		long base = smallestGoodBase.getSmallestBase(num);
		// System.out.println(base);
        return base+"";
    }
}


public class SmallestGoodBase {

	public  long getSmallestBase(long num) {
		// 2^60 > 10^18
		for(int maxTerm = 60;maxTerm>=1;maxTerm--)
		{
			long lowBase = 2;
			long highBase = num-1;
			while (lowBase<=highBase) {
				long midBase = lowBase + (highBase - lowBase )/2;
				long value = 0l, x = 1l;
				boolean isCurrentValueGreaterthanTargetNum = false;
				for(int currentTerm = 0;currentTerm<maxTerm;currentTerm++)
				{
					//base^0 + base^1 + base^2 + base^3 + base^4 ........
					value = value + x;
					// check if current value is only greater than num then no need to move forward 
					//as we will be generating greater value than target num
                   
					if((num-value)/x < midBase && currentTerm<maxTerm-1)
					{
						isCurrentValueGreaterthanTargetNum = true;
						break;
					}
                   
					    x = x*midBase;
				}//power
				
				if (isCurrentValueGreaterthanTargetNum) {
					{
						highBase = midBase-1;
					}
				}
				else if(value < num)
					{
						lowBase = midBase + 1;
					}
                else //if(value==num)
					return midBase;    
			}/////while
			
		}///term
		return 0;
	}

}
