public class RotatedSortedArraySearch {
    // Function to find the pivot (smallest element index)
    private int findPivot(int[] nums) {
        int left = 0, right = nums.length - 1;
        
        while (left < right) {
            int mid = left + (right - left) / 2;
            
            // If mid element is greater than the last element, pivot is in the right half
            if (nums[mid] > nums[right]) {
                left = mid + 1;
            } else { // Pivot is in the left half
                right = mid;
            }
        }
        
        return left; // Pivot index
    }

    // Function to perform binary search
    private int binarySearch(int[] nums, int left, int right, int target) {
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
        return -1; // Target not found
    }

    // Main function to search in rotated sorted array
    public int search(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return -1;
        }
        
        // Step 1: Find the pivot
        int pivot = findPivot(nums);
        
        // Step 2: Decide which part of the array to search
        if (target >= nums[pivot] && target <= nums[nums.length - 1]) {
            // Search in the right half
            return binarySearch(nums, pivot, nums.length - 1, target);
        } else {
            // Search in the left half
            return binarySearch(nums, 0, pivot - 1, target);
        }
    }

    public static void main(String[] args) {
        RotatedSortedArraySearch solution = new RotatedSortedArraySearch();
        int[] nums = {4, 5, 6, 7, 0, 1, 2};
        int target = 0;
        int result = solution.search(nums, target);
        System.out.println("Index of target: " + result); // Output: 4
    }
}
