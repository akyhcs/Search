--matrix is only sorted row wise  
https://leetcode.com/problems/kth-smallest-number-in-multiplication-table/description/
/*
K-th Smallest in Matrix
markAsDonemarkForRevisionmarkForLater
Given an N ∗ N matrix where each of the rows and columns are sorted in ascending order, print the K−th smallest element in the matrix.
Note that it is the K−th smallest element in the sorted order, not the 
k−th distinct element.

Try to solve this question using Binary Search

Input Format

The first line of input contains 
N
The second line contains N ∗ N
 integers in the form of a matrix
The third line contains an integer 
K
Constraints
1 ≤ N ≤300
−10^9 ≤ matrix[i][j] ≤10^9
1 ≤ K ≤ N2
Output Format

Print the K−th smallest element in the matrix.
Sample Input 0

3
1 5 9
10 11 13
12 13 15
8

Sample Output 0
13 Explanation Matrix elements in a sorted order are 1,5,9,10,11,12,13,13,15. Thus, 13 is the 8−th smallest element in the matrix



// package com.prac.search;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {

	public static void main(String[] args) throws NumberFormatException, IOException {
		
		InputStreamReader inputStreamReader = new InputStreamReader(System.in);
		BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
		int n = Integer.parseInt(bufferedReader.readLine().trim());
		//System.out.println(n+"-------------");
		int mat[][] = new int[n][n];
		for(int i = 0;i<n;i++)
		{
			int j=0;
			for(String str : bufferedReader.readLine().trim().split(" "))
			{
					mat[i][j++] = Integer.parseInt(str);	
			}
		//	display(mat);
		}
		//display(mat);
		int k = Integer.parseInt(bufferedReader.readLine().trim());
		int max = mat[0][0];
		int min = mat[0][0];
		int indexOfFirstColumn = 0;
		int indexofLastColumn = mat[0].length;
		for(int row = 0;row<mat.length;row++)
		{
min = min<mat[row][indexOfFirstColumn]?min:mat[row][indexOfFirstColumn];
			max = max>mat[row][indexofLastColumn-1]?max:mat[row][indexofLastColumn-1];
		}
		while (min<=max) {
			int mid = min + (max-min)/2;
			int count =  getCountofElementLessorEquall(mid,mat);
			if(count<k)
			{
				min = mid+1;
			}
			else
			{
				count = getCountofElementLessorEquall(mid-1,mat);
				if(count<k)
				{
					System.out.println(mid);
					break;
				}
				max = mid-1;
			}
		}
		bufferedReader.close();
		inputStreamReader.close();
		
		}
		
		
	

	private static void display(int[][] mat) {
		System.out.println("---------------------------------------");
		for(int i =0 ;i<mat.length;i++)
		{
			for(int j = 0 ;j<mat[i].length;j++)
			{
				System.out.print(mat[i][j]+" ");
			}
			System.out.println();
		}
		
	}

	private static int getCountofElementLessorEquall(int target, int[][] mat) {
		//binary search
		//System.out.println(target+"------------");
		int count = 0;
		for(int row = 0;row<mat.length;row++)
		{
			int minColumn = 0;
			int maxColumn = mat[row].length-1;
			boolean isFound = false;
			while(minColumn<=maxColumn)
			{
				int midCol = minColumn + (maxColumn-minColumn)/2;
				if(mat[row][midCol]==target)
				{
					count=count+(midCol+1);
					isFound=true;
					break;
				}
				else if(mat[row][midCol]<target)
				{
					minColumn = midCol+1;
				}//else 
				else
				{
					maxColumn = midCol-1;
				}//else
			}//while
			if(!isFound)
			{
				count = count + (maxColumn+1); //count = count + (minColumn);
			}
		}
	//	System.out.println(count);
		return count;
	}

}
