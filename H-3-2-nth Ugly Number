/*
An ugly number is a positive integer that is divisible by 
a,b, or c.

Given four integers 
n, a, b, and c, print the nth ugly number.

Input Format

The first line of input contains 
T, number of testcases
The first line of each testcase contains 
4 positive integers n, a, b and c

Constraints

1 ≤ T ≤ 10^5
1 ≤ n,a,b,c ≤ 10^9
1 ≤ a∗b∗c ≤ 10^18
It is guaranteed that the result will be in range [1,2∗109].
Output Format

Print the 
nth ugly number.
Sample Input 0

2
3 2 3 5
4 2 3 4

Sample Output 0

4
6

Explanation

The ugly numbers are 
2,3,4,5,6,8,9,10... The 3rd is 4.
The ugly numbers are 
2,3,4,6,8,9,10,12... The 4th is 6.

*/


/* package codechef; // don't place package name! */
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

/* Name of the class has to be "Main" only if the class is public. */
public class Main
{
  	public static void main(String[] args) throws NumberFormatException, IOException {
		InputStreamReader inputStreamReader = new InputStreamReader(System.in);
		BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
		int totalInput = new Integer(bufferedReader.readLine());
		long n, a, b, c;
		while (totalInput-- > 0) {
			String arr[] = bufferedReader.readLine().split(" ");
			n = new Long(arr[0]);
			a = new Long(arr[1]);
			b = new Long(arr[2]);
			c = new Long(arr[3]);

			int uglyNumber = getUglyNumber(n, a, b, c);
			System.out.println(uglyNumber);
		}
	}

	private static int getUglyNumber(long n, long a, long b, long c) {
		long low = getMin(a,b);//a<b
		low = getMin(low, c);
		long hi = n*low;
		long lcm = getLCM(a,b);
		lcm = getLCM(lcm, c);
        long count = -1;
        int ans = -1;
        long lcmAB = getLCM(a,b);
        long lcmBC = getLCM(b,c);
        long lcmCA = getLCM(c,a);
		while (low<=hi) {
			long mid = low + (hi-low)/2;
			count = mid/a + mid/b + mid/c - mid/lcmAB - mid/lcmBC - mid/lcmCA + mid/lcm;
			if(count==n){ ans=(int)(mid); hi = mid-1; }
			else if(count < n) { low = mid +1  ;}
			else {hi = mid-1;}
		}
		return ans;
	
	}

	private static long getLCM(long a, long b) {

		long min = getMin(a, b);
		long max = getMax(a, b);
		
		return min * (max / getHCF(a, b));
	}

	private static long getMax(long a, long b) {

		return a > b ? a : b;
	}

	private static long getHCF(long a, long b) {
		long c = -1l;
		while ((c = a % b) != 0) {
			a = b;
			b = c;
		}
		return b;
	}

	private static long getMin(long a, long b) {

		return a < b ? a : b;
	}

}
